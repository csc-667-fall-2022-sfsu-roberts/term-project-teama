#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('csc667teama:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/*
 * Set up Socket 
*/
//const formatMessage = require("./public/javascripts/messages");
const socket = require('socket.io');
const io = socket(server);

const formatMessage = require("../public/javascripts/messages")
const botName = "ChatCord Bot";

// Handle socket traffic
io.sockets.on('connection', (socket) => {
  console.log("New connetction socket.id : ", socket.id);

  socket.on('login', (username) => {
    console.log("A user logged in....");
    // Welcome current user
    socket.emit("message", formatMessage(botName, "Welcome to ChatCord!"));
    // Broadcast when a user connects
    socket.broadcast
      .emit(
        "message",
        formatMessage(botName, `${username} has joined the chat`)
      );
  });

  // Listen for chatMessage
  socket.on("chatMessage", ({name, msg}) => {
    //const user = getCurrentUser(socket.id);
    io.emit("message", formatMessage(name, msg));
  });


  socket.on('disconnect', () => {
    console.log("disconnect => socket.id : ", socket.id);
  });

});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
